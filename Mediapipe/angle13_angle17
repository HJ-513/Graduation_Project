import cv2
import mediapipe as mp
import numpy as np

max_num_hands = 1

#MediaPipe hands model
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
hands = mp_hands.Hands(
    max_num_hands=max_num_hands,
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5)

cap = cv2.VideoCapture(0)

while cap.isOpened():
    ret, img = cap.read()
    if not ret:
        continue

    img = cv2.flip(img, 1)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    result = hands.process(img)

    img =cv2.cvtColor(img, cv2.COLOR_RGB2BGR)

    if result.multi_hand_landmarks is not None:
        for res in result.multi_hand_landmarks:
            joint = np.zeros((21,3))
            for j, lm in enumerate(res.landmark):
                joint[j] = [lm.x, lm.y, lm.z]

            #Compute angles between joints
            # 59,56
            v1 = joint[[5,5,5,9,9,13,17,17],:]
            v2 = joint[[9,6,13,10,17,14,13,18],:]
            
            # 08,59
            # v1 = joint[[0,5,0,9,0,13,0,17],:]
            # v2 = joint[[8,9,12,13,16,17,20,13],:]

            # 05,08
            # v1 = joint[[0,0,0,0,0,0,0,0],:]
            # v2 = joint[[5,8,9,12,13,16,17,20],:]
            v = v2 - v1 # [20,3]

            # Normalize v(벡터 정규화)
            # 벡터 정규화 : 한 벡터를 벡터의 길이로 나누어 방향값만 남도록 길이를 1로 만드는 것.
            # 정규화를 통해 만들어진 벡터를 단위벡터라고 함.
            v = v / np.linalg.norm(v, axis=1)[:, np.newaxis]

            # Get angle using arcos of dot product
            # 단위벡터에 arcos를 곱해 각도가 나오도록 함.
            # einsum: 아인슈타인 합계. 벡터의 연산을 편하게 하도록하는 식
            angle = np.arccos(np.einsum('nt, nt->n',
                v[[0,2,4,6],:],
                v[[1,3,5,7],:])) # [16,]

            # Convert radian to degree
            angle = np.degrees(angle)
            angle = angle.astype(int)

            angle5 = str(angle[0])
            angle9 = str(angle[1])
            angle13 = str(angle[2])
            angle17 = str(angle[3])

            cv2.putText(img, text=angle5, org=(int(res.landmark[5].x * img.shape[1]), int(res.landmark[5].y * img.shape[0])), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, color=(255,0,0), thickness=2)

            cv2.putText(img, text=angle9, org=(int(res.landmark[9].x * img.shape[1]), int(res.landmark[9].y * img.shape[0])), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, color=(255,0,0), thickness=2)

            cv2.putText(img, text=angle13, org=(int(res.landmark[13].x * img.shape[1]), int(res.landmark[13].y * img.shape[0])), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, color=(255,0,0), thickness=2)

            cv2.putText(img, text=angle17, org=(int(res.landmark[17].x * img.shape[1]), int(res.landmark[17].y * img.shape[0])), fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1, color=(0,255,0), thickness=2)
            
            mp_drawing.draw_landmarks(img, res, mp_hands.HAND_CONNECTIONS)
    
    cv2.imshow('Game', img)
    if cv2.waitKey(1) == ord('q'):
        break